import React, { useState, useEffect } from 'react';
import { Brain, Home, Lightbulb, Info, User, LogIn, Settings, PenSquare, MessageSquare, HelpCircle, LogOut, Download, Clock, X, Sparkles, MessageCircle } from 'lucide-react';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import '../App.css';
import { Link, useNavigate } from 'react-router-dom';

const Navbar = () => {
  // Existing state variables from the original code
  const [isAccountMenuOpen, setIsAccountMenuOpen] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [userData, setUserData] = useState(null);
  const [questionsHistory, setQuestionsHistory] = useState([]);
  const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);
  const [isChatOpen, setIsChatOpen] = useState(false);
  const [chatMessage, setChatMessage] = useState('');
  const [chatMessages, setChatMessages] = useState([
    {
      sender: 'ai',
      content: "Hello! I'm InterviewAI. Enter your prompt here to get help with interview preparation, resume tips, or career advice."
    }
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const [expandedEntries, setExpandedEntries] = useState({});
  const [selectedHistoryItem, setSelectedHistoryItem] = useState(null);
  const [conversationId, setConversationId] = useState(null); // New state to track conversation ID
  const [isSendingChat, setIsSendingChat] = useState(false); // New state to track chat loading state
  const navigate = useNavigate();

  // Existing useEffect and functions remain the same...

  // New function to handle chat submission with API integration
  const handleChatSubmit = async (e) => {
    e.preventDefault();
    if (chatMessage.trim() && !isSendingChat) {
      // Add user message to chat
      setChatMessages(prev => [
        ...prev,
        { sender: 'user', content: chatMessage, timestamp: new Date().toISOString() }
      ]);
      
      // Store the message to clear input field
      const message = chatMessage;
      setChatMessage('');
      
      // Set loading state
      setIsSendingChat(true);
      
      try {
        // Add loading indicator
        setChatMessages(prev => [
          ...prev,
          { sender: 'ai', content: "...", isLoading: true }
        ]);
        
        // Make API request to the backend
        const response = await fetch('http://localhost:5006/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            message: message,
            conversation_id: conversationId
          }),
        });
        
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        
        const data = await response.json();
        
        // Remove loading message
        setChatMessages(prev => prev.filter(msg => !msg.isLoading));
        
        // Add AI response to chat
        setChatMessages(prev => [
          ...prev,
          { 
            sender: 'ai', 
            content: data.ai_response,
            timestamp: new Date().toISOString()
          }
        ]);
        
        // Save conversation ID for future messages
        if (data.conversation_id) {
          setConversationId(data.conversation_id);
        }
      } catch (error) {
        console.error('Error sending chat message:', error);
        
        // Remove loading message
        setChatMessages(prev => prev.filter(msg => !msg.isLoading));
        
        // Show error message
        setChatMessages(prev => [
          ...prev,
          { 
            sender: 'ai', 
            content: "Sorry, I couldn't process your request. Please try again later.",
            timestamp: new Date().toISOString(),
            isError: true
          }
        ]);
      } finally {
        setIsSendingChat(false);
      }
    }
  };

  // Function to fetch chat history
  const fetchChatHistory = async () => {
    try {
      const response = await fetch('http://localhost:5006/api/chat/history');
      if (response.ok) {
        const data = await response.json();
        if (data.conversations && data.conversations.length > 0) {
          // If there are existing conversations, load the most recent one
          const latestConversation = data.conversations[data.conversations.length - 1];
          setConversationId(latestConversation.id);
          setChatMessages(latestConversation.messages);
        }
      }
    } catch (error) {
      console.error('Error fetching chat history:', error);
    }
  };

  // Load chat history when component mounts
  useEffect(() => {
    if (isLoggedIn) {
      fetchChatHistory();
    }
  }, [isLoggedIn]);

  // Rest of the component remains the same...

  // Just update the Chat Modal section to show loading states
  return (
    <>
      {/* Existing navigation and modals... */}
      
      {/* Chat Modal with updated loading states */}
      {isChatOpen && (
        <div className="fixed inset-0 z-30 flex items-center justify-center bg-black/50 backdrop-blur-sm animate-fadeIn">
          <div className="bg-gray-900 border border-white/10 rounded-lg shadow-xl overflow-hidden transform transition-all duration-300 w-full max-w-4xl h-[80vh] flex flex-col">
            <div className="p-4 border-b border-white/10 flex items-center justify-between bg-gradient-to-r from-blue-900/30 to-purple-900/30">
              <h3 className="text-xl font-bold text-white flex items-center gap-3">
                <MessageCircle size={24} className="text-blue-400" />
                InterviewAI Chat Assistant
              </h3>
              <button
                onClick={() => setIsChatOpen(false)}
                className="p-2 rounded-full hover:bg-white/10 transition-colors duration-300"
              >
                <X size={20} className="text-gray-400 hover:text-white" />
              </button>
            </div>
            
            <div className="flex-1 p-6 overflow-y-auto bg-black/20 space-y-4" id="chat-messages-container">
              {chatMessages.map((message, index) => (
                <div 
                  key={index} 
                  className={`flex items-start gap-4 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  {message.sender === 'ai' && (
                    <div className={`bg-blue-500/20 p-3 rounded-full flex-shrink-0 ${message.isLoading ? 'animate-pulse' : ''}`}>
                      <Brain size={20} className="text-blue-400" />
                    </div>
                  )}
                  <div 
                    className={`p-4 rounded-lg max-w-[80%] ${
                      message.sender === 'ai' 
                        ? message.isError 
                          ? 'bg-red-500/20 text-red-100' 
                          : 'bg-gray-800/50 text-white'
                        : 'bg-blue-500/20 text-blue-100'
                    } ${message.isLoading ? 'animate-pulse' : ''}`}
                  >
                    {message.isLoading ? (
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                        <div className="w-2 h-2 bg-blue-400 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }}></div>
                      </div>
                    ) : (
                      <p className="text-base whitespace-pre-wrap">{message.content}</p>
                    )}
                  </div>
                  {message.sender === 'user' && (
                    <div className="bg-purple-500/20 p-3 rounded-full flex-shrink-0">
                      <User size={20} className="text-purple-400" />
                    </div>
                  )}
                </div>
              ))}
            </div>
            
            <form onSubmit={handleChatSubmit} className="p-4 border-t border-white/10 bg-black/30">
              <div className="flex items-center gap-3">
                <input
                  type="text"
                  value={chatMessage}
                  onChange={(e) => setChatMessage(e.target.value)}
                  placeholder="Enter your prompt here..."
                  className="flex-1 bg-gray-800/50 border border-white/10 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-500/50 focus:border-transparent text-base"
                  autoFocus
                  disabled={isSendingChat}
                />
                <button
                  type="submit"
                  className={`p-3 ${isSendingChat ? 'bg-gray-700 text-gray-400' : 'bg-blue-500/20 hover:bg-blue-500/30 text-blue-400'} rounded-lg transition-colors duration-300 border border-blue-500/30`}
                  disabled={isSendingChat}
                >
                  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                  </svg>
                </button>
              </div>
              <p className="text-xs text-gray-500 mt-2 ml-1">
                Press Enter to send, Shift+Enter for new line
              </p>
            </form>
          </div>
        </div>
      )}
      
      {/* Rest of the component... */}
    </>
  );
};

// NavLink and AccountOption components remain the same...
const NavLink = ({ icon, text, onClick }) => (
    <button
      onClick={onClick}
      className="flex items-center gap-2 transition-all duration-300 relative group text-gray-400 hover:text-white"
    >
      <span className="relative">{icon}</span>
      <span className="relative">{text}</span>
      <span className="absolute -bottom-1 left-0 w-0 h-0.5 bg-gradient-to-r from-blue-500 to-purple-500 transition-all duration-300 group-hover:w-full"></span>
    </button>
  );
  
  const AccountOption = ({ icon, text, onClick, className = "text-gray-400 hover:text-white", isSpecial, badge }) => (
    <button 
      className={`w-full px-4 py-2 text-sm hover:bg-white/5 text-left flex items-center gap-2 transition-all duration-200 ${
        isSpecial ? "text-gradient bg-gradient-to-r from-blue-400 to-purple-400" : className
      }`}
      onClick={onClick}
    >
      <span className={`${isSpecial ? "text-purple-400" : "opacity-70"}`}>{icon}</span>
      <span>{text}</span>
      {badge && (
        <span className="ml-auto bg-blue-500 text-white text-xs px-1.5 py-0.5 rounded-full min-w-5 text-center">
          {badge}
        </span>
      )}
    </button>
  );

export default Navbar;